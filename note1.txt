// docker container command
docker container run --publish 3000:80 --name webserver --detach nginx
docker container ls              ...  same as docker ps
docker container ls -a           ...  same as docker ps -a
docker container logs webserver  ...  view logs of container. `-f` to follow logs, `-n` to view number of lines frm logs
docker container top webserver   ...  view running process of the container
docker container port webserver  ...  to view list of port mappings

docker container top [container-name-or-id]     ... view process list in the container
docker container inspect [container-name-or-id] ... view details of the container
docker container stats                          ... view performance stats of ALL containers

docker container exec -it mysql bash                                ... run bash on mysql container
docker container ls                                                 ... when you exit frm mysql bash, only bash process is terminated, mysql container is still active            
docker container inspect -f '{{.NetworkSettings.IPAddress}}' nginx1 ... to view IPAddress of container nginx1 (using `-f or --format` flag to filter)


// docker network command
docker network ls
docker network inspect [network-name]                  ... inspect the docker network 
docker network connect [OPTIONS] NETWORK CONTAINER     ... attach a network to container
docker network disconnect [OPTIONS] NETWORK CONTAINER  ... detach a network from container


// docker networks: DNS
// example1) create 2 nginx containers & execute ping command frm nginx1 to nginx2 using custom network (bridge driver, with built-in DNS server)
// when we create new network "nginxnet" (bridge), it will automatically has DNS server built into it unlike default "bridge" network.
// default "bridge" network does not have DNS server built in it, which is why without manually connect the containers to our custom network "nginxnet",
// we could not let containers to communicate with each other (using default "bridge" network, we CANNOT execute `docker container exec nginx1 ping nginx2`. 
// Therefore, we use "nginxnet" which uses "bridge" driver)
docker container run -d --name nginx1 nginx
docker container run -d --name nginx2 nginx
docker network create --driver bridge nginxnet  ... create new network named "nginxnet" using bridge driver (default is bridge)
docker network connect nginxnet nginx1          ... container name "nginx1" is also the container DNS now   
docker network connect nginxnet nginx2          ... container name "nginx2" is also the container DNS now

docker container exec nginx1 ping nginx2 
docker container exec nginx2 ping nginx1
// OR 
docker container exec -it nginx1 ping nginx2    ... since now nginx1 & nginx2 is in same network, they can communicate with each other!
docker container exec -it nginx2 ping nginx1        ** using default bridge network (no DNS server built-in), this WONT work!
                                                    ** the work around of this is by using `--link` flag to link nginx1 & nginx2 (see example2 below)


// example2) create 2 nginx containers & execute ping command frm nginx1 to nginx2 using default bridge network (NO built-in DNS server)
// since default bridge network does NOT have DNS server built-in, we need to use `--link` flag to establish connection between containers
docker container run -d --name nginx3 --link nginx4:nginx4 nginx
docker container run -d --name nginx4 --link nginx3:nginx3 nginx

docker container exec nginx3 ping nginx4
docker container exec nginx4 ping nginx3
// OR
docker container exec -it nginx3 ping nginx4
docker container exec -it nginx4 ping nginx3


// example3) DNS Round Robin
// in docker container run command, using flag `--network-alias` it means: 
// I want another DNS alias to call this container by (besides its container name which is also its DNS)
// Since we use `--network-alias`, we do NOT need to name the containers, we are just gonna use the network-alias.
// Every request comes to the defined network-alias will be forwarded to either one of the containers (they all have same network-alias, sanme DNS so to say)
// which makes DNS round robin possible.
// in this example, we use `nslookup`. nslookup (name server lookup) is a tool used to perform DNS lookups in Linux
docker network create searchnet
docker container run -d --network searchnet --network-alias search elasticsearch:2
docker container run -d --network searchnet --network-alias search elasticsearch:2  ... we run 2 containers with similar DNS "search"

docker container ls     ... we can see that they have different container name (since we never specify the name), they have same DNS name "search"
```
CONTAINER ID   IMAGE             COMMAND                  CREATED             STATUS             PORTS                  NAMES
fb3647249f5f   elasticsearch:2   "/docker-entrypoint.…"   36 seconds ago      Up 34 seconds      9200/tcp, 9300/tcp     happy_mirzakhani
bb4faac84bd8   elasticsearch:2   "/docker-entrypoint.…"   41 seconds ago      Up 39 seconds      9200/tcp, 9300/tcp     dreamy_gauss
```

// testing it by lookup to "search" DNS entry to see which IPs are registered to the DNS
// testing it from alpine which HAS TO BE FROM SAME NETWORK ("searchnet")
// the test will give 2 of our container IPs assigned to DNS "search"
// we can check both our container IPs (`docker container inspect [container-IDs...] -f '{{.NetworkSettings.Networks.searchnet.IPAddress}}'`)
docker container run --rm --network searchnet alpine nslookup search    ... test using linux alpine

```
Name:	search
Address: 172.20.0.3
Name:	search
Address: 172.20.0.2
```


// test using centos `curl`. Run it multiple times to get response frm different container
// this show DNS round robin
docker container run --rm --network searchnet centos curl -s search:9200    ... both containers run on port 9200 (curl -s... `-s` for silent mode)
```
{
  "name" : "Apollo",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "eIBJKchgTzelPcqR5jwLbg",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}
```

docker container run --rm --network searchnet centos curl -s search:9200    ... both containers run on port 9200 (curl -s... `-s` for silent mode)
```
{
  "name" : "Poison",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "h1y4ZXCUSoeHFhZsD2FTbw",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}
```


// testing using ubuntu curl
docker container run -it --network searchnet ubuntu
> apt-get update & apt-get install -y curl
> while sleep 1; do curl -s search:9200 | grep name | grep -v cluster; done
```
  "name" : "Poison",
  "name" : "Apollo",
  "name" : "Apollo",
  "name" : "Apollo",
  "name" : "Apollo",
  "name" : "Apollo",
  "name" : "Poison",
  "name" : "Poison",
  ...

```


// inspect docker container vs docker image
docker container inspect [container-id-or-container-name]
docker image inspect [docker-image]


// Using Prune to Keep Your Docker System Clean (YouTube)
You can use "prune" commands to clean up images, volumes, build cache, and containers. Examples include:
- `docker image prune` to clean up just "dangling" images
- `docker system prune` will clean up everything
- The big one is usually `docker image prune -a` which will remove all images you're not using. 
  Use `docker system df` to see space usage.

Remember each one of those commands has options you can learn with --help.
Here's a YouTube video I made about it: https://youtu.be/_4QzP7uwtvI
Lastly, realize that if you're using Docker Toolbox, the Linux VM won't auto-shrink. 
You'll need to delete it and re-create (make sure anything in docker containers or volumes are backed up). 
You can recreate the toolbox default VM with `docker-machine rm default` and then `docker-machine create`


// docker compose
docker-compose up
docker-compose down ... `-v` flag to remove the volumes, etc (`docker-compose --help` for the details)
docker-compose top
docker-compose ps
docker-compose logs


// docker swarm
docker info           ... to check if swarm is active and other docker info
docker swarm init     ... to start docker swarm, leader node will be created
docker node ls        ... to list out all nodes that we have created
```
ID                            HOSTNAME         STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
b98buynnt8wzglm7x82kyz49w *   docker-desktop   Ready     Active         Leader           20.10.8
```

docker node --help
docker swarm          ... manage docker swarm. Join swarm, leave, init, etc. (`docker swarm --help`)
docker node           ... manage docker swarm nodes. promote, demote nodes, update, etc. (`docker node --help`)
docker service        ... manage services (group of containers) in nodes (docker service almost similar to docker run). Create services, scale, update, etc. (`docker service --help`)
                          (docker swarm --> docker nodes --> docker services --> docker containers)

// docker service
docker service create alpine ping 8.8.8.8   ... create docker service (with 1 container pinging 8.8.8.8)
docker service ls                           ... list out all services
```
ID             NAME                MODE         REPLICAS   IMAGE           PORTS
ih7h2tehneo3   affectionate_boyd   replicated   1/1        alpine:latest 
```

docker service ps affectionate_boyd         ... list tasks or containers running on specific service (service name or id). This is similar to `docker container ls` as you can see the tasks/containers using the command
```
ID             NAME                  IMAGE           NODE             DESIRED STATE   CURRENT STATE           ERROR     PORTS
jiz0upg8bqo4   affectionate_boyd.1   alpine:latest   docker-desktop   Running         Running 6 minutes ago    
```
docker container ls
```
CONTAINER ID   IMAGE           COMMAND          CREATED         STATUS         PORTS     NAMES
734f54344de4   alpine:latest   "ping 8.8.8.8"   9 minutes ago   Up 9 minutes             affectionate_boyd.1.jiz0upg8bqo48jm19ss8g6u4h
```

docker service update ih7h2tehneo3 --replicas 5   ... update service to increase tasks/containers to 5
docker service ls
```
ID             NAME                MODE         REPLICAS   IMAGE           PORTS
ih7h2tehneo3   affectionate_boyd   replicated   5/5        alpine:latest   
```

docker service ps ih7h2tehneo3
```
ID             NAME                  IMAGE           NODE             DESIRED STATE   CURRENT STATE                ERROR     PORTS
jiz0upg8bqo4   affectionate_boyd.1   alpine:latest   docker-desktop   Running         Running 15 minutes ago                 
g7rljwko7sqk   affectionate_boyd.2   alpine:latest   docker-desktop   Running         Running about a minute ago             
3wrnwnd566np   affectionate_boyd.3   alpine:latest   docker-desktop   Running         Running about a minute ago             
c023wsh5wj7j   affectionate_boyd.4   alpine:latest   docker-desktop   Running         Running about a minute ago             
5oowugmxwf40   affectionate_boyd.5   alpine:latest   docker-desktop   Running         Running about a minute ago             
```

docker container ls
```
CONTAINER ID   IMAGE           COMMAND          CREATED          STATUS          PORTS     NAMES
3dce317ef276   alpine:latest   "ping 8.8.8.8"   6 minutes ago    Up 6 minutes              affectionate_boyd.3.3wrnwnd566npjbz5yt1p5xc3q
0e2b7d4c8371   alpine:latest   "ping 8.8.8.8"   6 minutes ago    Up 6 minutes              affectionate_boyd.2.g7rljwko7sqkz97d9lcrttjyj
e31f98ce132c   alpine:latest   "ping 8.8.8.8"   6 minutes ago    Up 6 minutes              affectionate_boyd.5.5oowugmxwf40b5n4iaina8123
b8b6529f9fc6   alpine:latest   "ping 8.8.8.8"   6 minutes ago    Up 6 minutes              affectionate_boyd.4.c023wsh5wj7jxpr1cmz5ig9rm
734f54344de4   alpine:latest   "ping 8.8.8.8"   20 minutes ago   Up 20 minutes             affectionate_boyd.1.jiz0upg8bqo48jm19ss8g6u4h
```

// docker container update ... to update/config individual container
// docker service update   ... to update/config individual or multiple containers & in more granular way
// docker service rm [container-name-or-id] ... to remove service (we can docker container rm. But, docker swarm will recreate new one once we remove manually)


// docker-machine
docker-machine                ... create and manage machines running Docker. But, not for PROD (ONLY testing). `docker-machine --help` for details
docker-machine create node1   ... create vm with docker installed called node1 (using virtualbox, etc)
docker-machine ls             ... list out all docker-machine


// demo: docker swarm using remote vm: using digitalocean creating 3 vms
docker swarm init --advertise-addr <IP-address(public)>   ... use this when we use remote host to run docker swarm. It is because you will be asked to specify ip address to advertise swarm service on.
                                                              Use public IP address because you wanna use IP that is accessible frm the other servers.
                                                              Use `docker swarm join --token ... ` to let other node join the swarm.

docker node ls                                            ... to list all the available nodes
docker node update --role                                 ... to list available role usually 'worker' & 'manager'
docker node update --role manager node2                   ... to update node2 role to 'manager' role
docker swarm join-token                                   ... to maange join tokens
docker swarm join-token manager                           ... to get token for manager role (for node that wanna join as manager node)
docker swarm join --token <token-value>                   ... to join docker swarm        


// now lets create service (alpine) with 3 tasks/containers
// (on leader node) 
docker service create --replicas 5 alpine ping 8.8.8.8 

docker service ls
```
ID             NAME             MODE         REPLICAS   IMAGE           PORTS
5wfdnvzywxd0   wonderful_bell   replicated   5/5        alpine:latest   
```

docker service ps 5wfdnvzywxd0
```
ID             NAME               IMAGE           NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS
wo3oh554dqh4   wonderful_bell.1   alpine:latest   node1     Running         Running 24 seconds ago             
nypsifpxpzqs   wonderful_bell.2   alpine:latest   node2     Running         Running 24 seconds ago             
muogutjxznlj   wonderful_bell.3   alpine:latest   node3     Running         Running 24 seconds ago             
7qonetqtkjeh   wonderful_bell.4   alpine:latest   node1     Running         Running 24 seconds ago             
wde1pgdsdk5j   wonderful_bell.5   alpine:latest   node2     Running         Running 24 seconds ago             
```


// docker stack (something like docker compose. But, docker stack is for swarm only while docker compose is for local development which only focus on single container)
// for the stack yaml file (docker compose yml with additional configuration), refer to:
// https://github.com/compose-spec/compose-spec/blob/master/spec.md#compose-file
// & example file: https://github.com/kaings-docker/udemy-docker-mastery/blob/main/swarm-stack-1/example-voting-app-stack.yml

// the difference docker stack vs docker compose:
// - docker stack is for docker swarm. It does NOT recognize 'build'. It recognize 'deploy' instead.
//   Because docker stack can be use for PROD. In PROD, we do NOT build, we only perform 'build' for local development 
//   (logical explanation why docker stack don't recognize 'build')
// - docker compose is for single container local development only. It recognize 'build' but not 'deploy'.
//   'deploy' is for docker swarm only (PROD ready environment)

// running docker stack (only works across one swarm) is just very similar to docker compose (`docker stack deploy --help` for details)
docker stack deploy -c example-voting-app-stack.yml voteapp
docker stack ls                                               ... to show all stacks
docker stack ps voteapp                                       ... List the tasks in the stack (our stack name is 'voteapp')
docker container ls                                           ... just check the running containers in that specific node (see the relationship between the running stack, services, tasks & containers)
docker stack services voteapp                                 ... List the services in the stack


